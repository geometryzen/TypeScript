=== tests/cases/compiler/recursiveExcessPropertyChecks.ts ===
// Repro from #35804

interface ITreeItem {    
  Parent?: this;
>Parent : this | undefined
}

type NodeWithId = ITreeItem & { Id?: number };
>NodeWithId : NodeWithId
>Id : number | undefined

function getMaxId(items: NodeWithId[]) {
>getMaxId : (items: NodeWithId[]) => void
>items : NodeWithId[]
}

const nodes = [] as ITreeItem[];
>nodes : ITreeItem[]
>[] as ITreeItem[] : ITreeItem[]
>[] : never[]

getMaxId(nodes);
>getMaxId(nodes) : void
>getMaxId : (items: NodeWithId[]) => void
>nodes : ITreeItem[]


// Repro from #42715
export interface Donkey {
    donkey: string;
>donkey : string
}

interface Diddy {
    diddy: string;
>diddy : string

    children?: Diddy[] | Donkey;
>children : Donkey | Diddy[] | undefined
}

interface Cranky {
    cranky: string;
>cranky : string

    children: Diddy;
>children : Diddy
}

type Dandy = Diddy & {
>Dandy : Dandy

    children: (Diddy & { funky?: string })[];
>children : (Diddy & { funky?: string | undefined; })[]
>funky : string | undefined

};
type X = Dandy["children"]
>X : (Donkey | Diddy[] | undefined) & (Diddy & { funky?: string | undefined; })[]

var x: X
>x : (Donkey | Diddy[] | undefined) & (Diddy & { funky?: string | undefined; })[]

const mainView: Dandy = {
>mainView : Dandy
>{    diddy: "",    children: [        {            diddy: "",            funky: "Empty" // <- Incorrect error        }    ],} : { diddy: string; children: { diddy: string; funky: string; }[]; }

    diddy: "",
>diddy : string
>"" : ""

    children: [
>children : { diddy: string; funky: string; }[]
>[        {            diddy: "",            funky: "Empty" // <- Incorrect error        }    ] : { diddy: string; funky: string; }[]
        {
>{            diddy: "",            funky: "Empty" // <- Incorrect error        } : { diddy: string; funky: string; }

            diddy: "",
>diddy : string
>"" : ""

            funky: "Empty" // <- Incorrect error
>funky : string
>"Empty" : "Empty"
        }
    ],
};
// Legal
const p = mainView.children[0].funky
>p : string | undefined
>mainView.children[0].funky : string | undefined
>mainView.children[0] : Diddy & { funky?: string | undefined; }
>mainView.children : (Donkey | Diddy[] | undefined) & (Diddy & { funky?: string | undefined; })[]
>mainView : Dandy
>children : (Donkey | Diddy[] | undefined) & (Diddy & { funky?: string | undefined; })[]
>0 : 0
>funky : string | undefined

