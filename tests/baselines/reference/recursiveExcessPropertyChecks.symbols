=== tests/cases/compiler/recursiveExcessPropertyChecks.ts ===
// Repro from #35804

interface ITreeItem {    
>ITreeItem : Symbol(ITreeItem, Decl(recursiveExcessPropertyChecks.ts, 0, 0))

  Parent?: this;
>Parent : Symbol(ITreeItem.Parent, Decl(recursiveExcessPropertyChecks.ts, 2, 21))
}

type NodeWithId = ITreeItem & { Id?: number };
>NodeWithId : Symbol(NodeWithId, Decl(recursiveExcessPropertyChecks.ts, 4, 1))
>ITreeItem : Symbol(ITreeItem, Decl(recursiveExcessPropertyChecks.ts, 0, 0))
>Id : Symbol(Id, Decl(recursiveExcessPropertyChecks.ts, 6, 31))

function getMaxId(items: NodeWithId[]) {
>getMaxId : Symbol(getMaxId, Decl(recursiveExcessPropertyChecks.ts, 6, 46))
>items : Symbol(items, Decl(recursiveExcessPropertyChecks.ts, 8, 18))
>NodeWithId : Symbol(NodeWithId, Decl(recursiveExcessPropertyChecks.ts, 4, 1))
}

const nodes = [] as ITreeItem[];
>nodes : Symbol(nodes, Decl(recursiveExcessPropertyChecks.ts, 11, 5))
>ITreeItem : Symbol(ITreeItem, Decl(recursiveExcessPropertyChecks.ts, 0, 0))

getMaxId(nodes);
>getMaxId : Symbol(getMaxId, Decl(recursiveExcessPropertyChecks.ts, 6, 46))
>nodes : Symbol(nodes, Decl(recursiveExcessPropertyChecks.ts, 11, 5))


// Repro from #42715
export interface Donkey {
>Donkey : Symbol(Donkey, Decl(recursiveExcessPropertyChecks.ts, 12, 16))

    donkey: string;
>donkey : Symbol(Donkey.donkey, Decl(recursiveExcessPropertyChecks.ts, 16, 25))
}

interface Diddy {
>Diddy : Symbol(Diddy, Decl(recursiveExcessPropertyChecks.ts, 18, 1))

    diddy: string;
>diddy : Symbol(Diddy.diddy, Decl(recursiveExcessPropertyChecks.ts, 20, 17))

    children?: Diddy[] | Donkey;
>children : Symbol(Diddy.children, Decl(recursiveExcessPropertyChecks.ts, 21, 18))
>Diddy : Symbol(Diddy, Decl(recursiveExcessPropertyChecks.ts, 18, 1))
>Donkey : Symbol(Donkey, Decl(recursiveExcessPropertyChecks.ts, 12, 16))
}

interface Cranky {
>Cranky : Symbol(Cranky, Decl(recursiveExcessPropertyChecks.ts, 23, 1))

    cranky: string;
>cranky : Symbol(Cranky.cranky, Decl(recursiveExcessPropertyChecks.ts, 25, 18))

    children: Diddy;
>children : Symbol(Cranky.children, Decl(recursiveExcessPropertyChecks.ts, 26, 19))
>Diddy : Symbol(Diddy, Decl(recursiveExcessPropertyChecks.ts, 18, 1))
}

type Dandy = Diddy & {
>Dandy : Symbol(Dandy, Decl(recursiveExcessPropertyChecks.ts, 28, 1))
>Diddy : Symbol(Diddy, Decl(recursiveExcessPropertyChecks.ts, 18, 1))

    children: (Diddy & { funky?: string })[];
>children : Symbol(children, Decl(recursiveExcessPropertyChecks.ts, 30, 22))
>Diddy : Symbol(Diddy, Decl(recursiveExcessPropertyChecks.ts, 18, 1))
>funky : Symbol(funky, Decl(recursiveExcessPropertyChecks.ts, 31, 24))

};
type X = Dandy["children"]
>X : Symbol(X, Decl(recursiveExcessPropertyChecks.ts, 32, 2))
>Dandy : Symbol(Dandy, Decl(recursiveExcessPropertyChecks.ts, 28, 1))

var x: X
>x : Symbol(x, Decl(recursiveExcessPropertyChecks.ts, 34, 3))
>X : Symbol(X, Decl(recursiveExcessPropertyChecks.ts, 32, 2))

const mainView: Dandy = {
>mainView : Symbol(mainView, Decl(recursiveExcessPropertyChecks.ts, 36, 5))
>Dandy : Symbol(Dandy, Decl(recursiveExcessPropertyChecks.ts, 28, 1))

    diddy: "",
>diddy : Symbol(diddy, Decl(recursiveExcessPropertyChecks.ts, 36, 25))

    children: [
>children : Symbol(children, Decl(recursiveExcessPropertyChecks.ts, 37, 14))
        {
            diddy: "",
>diddy : Symbol(diddy, Decl(recursiveExcessPropertyChecks.ts, 39, 9))

            funky: "Empty" // <- Incorrect error
>funky : Symbol(funky, Decl(recursiveExcessPropertyChecks.ts, 40, 22))
        }
    ],
};
// Legal
const p = mainView.children[0].funky
>p : Symbol(p, Decl(recursiveExcessPropertyChecks.ts, 46, 5))
>mainView.children[0].funky : Symbol(funky, Decl(recursiveExcessPropertyChecks.ts, 31, 24))
>mainView.children : Symbol(children, Decl(recursiveExcessPropertyChecks.ts, 21, 18), Decl(recursiveExcessPropertyChecks.ts, 30, 22))
>mainView : Symbol(mainView, Decl(recursiveExcessPropertyChecks.ts, 36, 5))
>children : Symbol(children, Decl(recursiveExcessPropertyChecks.ts, 21, 18), Decl(recursiveExcessPropertyChecks.ts, 30, 22))
>funky : Symbol(funky, Decl(recursiveExcessPropertyChecks.ts, 31, 24))

