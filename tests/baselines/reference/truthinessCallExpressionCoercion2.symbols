=== tests/cases/compiler/truthinessCallExpressionCoercion2.ts ===
function test(required1: () => boolean, required2: () => boolean, optional?: () => boolean) {
>test : Symbol(test, Decl(truthinessCallExpressionCoercion2.ts, 0, 0))
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>required2 : Symbol(required2, Decl(truthinessCallExpressionCoercion2.ts, 0, 39))
>optional : Symbol(optional, Decl(truthinessCallExpressionCoercion2.ts, 0, 65))

    // error
    required1 && console.log('required');
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // error
    1 && required1 && console.log('required');
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // ok
    required1 && required1();
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))

    // ok
    required1 && 1 && required1();
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))

    // ok
    optional && console.log('optional');
>optional : Symbol(optional, Decl(truthinessCallExpressionCoercion2.ts, 0, 65))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // ok
    1 && optional && console.log('optional');
>optional : Symbol(optional, Decl(truthinessCallExpressionCoercion2.ts, 0, 65))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // ok
    !!required1 && console.log('not required');
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // ok
    required1() && console.log('required call');
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // ok
    required1 && required2 && required1() && required2();
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>required2 : Symbol(required2, Decl(truthinessCallExpressionCoercion2.ts, 0, 39))
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>required2 : Symbol(required2, Decl(truthinessCallExpressionCoercion2.ts, 0, 39))

    // error
    required1 && required2 && required1() && console.log('foo');
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>required2 : Symbol(required2, Decl(truthinessCallExpressionCoercion2.ts, 0, 39))
>required1 : Symbol(required1, Decl(truthinessCallExpressionCoercion2.ts, 0, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
}

function checksConsole() {
>checksConsole : Symbol(checksConsole, Decl(truthinessCallExpressionCoercion2.ts, 30, 1))

    // error
    typeof window !== 'undefined' && window.console &&
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>window.console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))

        ((window.console as any).firebug || (window.console.exception && window.console.table));
>window.console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>window.console.exception : Symbol(Console.exception, Decl(lib.dom.d.ts, --, --))
>window.console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>exception : Symbol(Console.exception, Decl(lib.dom.d.ts, --, --))
>window.console.table : Symbol(Console.table, Decl(lib.dom.d.ts, --, --))
>window.console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>table : Symbol(Console.table, Decl(lib.dom.d.ts, --, --))
}

function checksPropertyAccess() {
>checksPropertyAccess : Symbol(checksPropertyAccess, Decl(truthinessCallExpressionCoercion2.ts, 36, 1))

    const x = {
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))

        foo: {
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))

            bar() { return true; }
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
        }
    }

    // error
    x.foo.bar && console.log('x.foo.bar');
>x.foo.bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // error
    1 && x.foo.bar && console.log('x.foo.bar');
>x.foo.bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    // ok
    x.foo.bar && x.foo.bar();
>x.foo.bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo.bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))

    // ok
    x.foo.bar && 1 && x.foo.bar();
>x.foo.bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo.bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
>x.foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>x : Symbol(x, Decl(truthinessCallExpressionCoercion2.ts, 39, 9))
>foo : Symbol(foo, Decl(truthinessCallExpressionCoercion2.ts, 39, 15))
>bar : Symbol(bar, Decl(truthinessCallExpressionCoercion2.ts, 40, 14))
}

class Foo {
>Foo : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))

    optional?: () => boolean;
>optional : Symbol(Foo.optional, Decl(truthinessCallExpressionCoercion2.ts, 58, 11))

    required() {
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))

        return true;
    }
    test() {
>test : Symbol(Foo.test, Decl(truthinessCallExpressionCoercion2.ts, 62, 5))

        // error
        this.required && console.log('required');
>this.required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

        // error
        1 && this.required && console.log('required');
>this.required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

        // ok
        this.required && this.required();
>this.required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this.required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))

        // ok
        this.required && 1 && this.required();
>this.required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this.required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>required : Symbol(Foo.required, Decl(truthinessCallExpressionCoercion2.ts, 59, 29))

        // ok
        1 && this.optional && console.log('optional');
>this.optional : Symbol(Foo.optional, Decl(truthinessCallExpressionCoercion2.ts, 58, 11))
>this : Symbol(Foo, Decl(truthinessCallExpressionCoercion2.ts, 56, 1))
>optional : Symbol(Foo.optional, Decl(truthinessCallExpressionCoercion2.ts, 58, 11))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
    }
}

